
if has('vim_starting')
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" add plugins
if has('lua')
    NeoBundleFetch "Shougo/neocomplete.vim"
    NeoBundle "Shougo/neocomplete.vim"
endif
NeoBundle 'Rip-Rip/clang_complete'


NeoBundleCheck


filetype plugin on

set nocompatible
set fileformats=unix,dos,mac
set backspace=indent,eol,start
"set encoding=euc-jp
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,sjis,euc-jp

set notitle
set showcmd
set clipboard=unnamed

set mouse=a
set ttymouse=xterm2

set cindent
set tabstop=4
set shiftwidth=4
set softtabstop=0
set expandtab

set number
set ruler
set incsearch
set hlsearch
set wrapscan
set smartcase
set showmatch

set nobackup
set background=dark

if &t_Co > 1
	syntax enable
endif

function SetScreenTabName(name)
	let arg = 'k' . a:name . '\\'
	silent! exe '!echo -n "' . arg . "\""
endfunction
if $LANG =~ "UTF"
	set termencoding=utf-8
endif

if &term =~ "screen"
	autocmd VimLeave * call SetScreenTabName('csh')
	autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | call SetScreenTabName("%") | endif 
endif

"Makefile
autocmd FileType make setlocal noexpandtab

"最後に開いた行で再開する
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
                         \ exe "normal g'\"" | endif


"==========================================
""neocomplete.vim
"==========================================S
if has('lua')
    "use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
            \ }
            " Define keyword.
            if !exists('g:neocomplete#keyword_patterns')
            let g:neocomplete#keyword_patterns = {}
            endif
            let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    " Plugin key-mappings.
    inoremap <expr><C-g> neocomplete#undo_completion()
    inoremap <expr><C-l> neocomplete#complete_common_string()
endif

"==========================================
""clang_complete.vim
"==========================================S
let g:clang_periodic_quickfix = 1
let g:clang_complete_copen = 1
let g:clang_use_library = 1

" this need to be updated on llvm update
let g:clang_library_path = '/usr/lib'
" " specify compiler options
let g:clang_user_options = '-std=c++11 '


if !exists('g:neocomplete#force_omni_input_patterns')
let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplete#force_omni_input_patterns.c =  '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc =  '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.objcpp =  '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:clang_complete_auto = 0
let g:clang_auto_select = 0
"let g:clang_use_library = 1

